<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vae的记事本</title>
  
  <subtitle>做一个有趣的产品，取悦自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-16T03:33:04.190Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>vae的节奏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu 18.04 开机启动</title>
    <link href="http://yoursite.com/2019/05/16/Ubuntu-18-04-%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/05/16/Ubuntu-18-04-开机启动/</id>
    <published>2019-05-16T03:33:04.000Z</published>
    <updated>2019-05-16T03:33:04.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-18-04-开机启动"><a href="#Ubuntu-18-04-开机启动" class="headerlink" title="Ubuntu 18.04 开机启动"></a>Ubuntu 18.04 开机启动</h1><p>Ubuntu 18.04更改了系统初始化程序，在之前用的是==init==，现在用的是==systemd==。</p><p>所以现在配置开启启动脚本，不再是配置==/etc/rc.local==，而是在配置systemd的配置文件。</p><ol><li><h2 id="配置systemd启动"><a href="#配置systemd启动" class="headerlink" title="配置systemd启动"></a>配置systemd启动</h2><p>systemd默认读取/etc/systemd/system下的配置文件。一般系统安装完/lib/systemd/system/下会有rc-local.service文件，复制过来用即可，由于我之前已经配置好了，就直接给出该文件。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/systemd/system/</span><br><span class="line">vi rc-local.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=/etc/rc.local Compatibility</span><br><span class="line">ConditionPathExists=/etc/rc.local</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/rc.local start</span><br><span class="line">TimeoutSec=0</span><br><span class="line">StandardOutput=tty</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">SysVStartPriority=99</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><h2 id="配置启动脚本"><a href="#配置启动脚本" class="headerlink" title="配置启动脚本"></a>配置启动脚本</h2><p>此时已经配置了 ==/etc/rc.local== 为启动脚本。但是我们还未创建==/etc/rc.local==，故创建并且编辑该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh -e</span></span><br><span class="line"></span><br><span class="line">date &gt;&gt; /root/start.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>由于该文件为系统文件，为了避免经常改动系统文件。故利用该文件，再引导启动一个用户文件，即 ==/root/bin/rc-vae.sh==。</p></li></ol><ol start="3"><li><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>重启服务器，查看是否有 ==/root/start.log==文件生成。如果有文件生成，即配置成功。</p></li></ol><ol start="4"><li><h2 id="创建用户启动文件"><a href="#创建用户启动文件" class="headerlink" title="创建用户启动文件"></a>创建用户启动文件</h2><p>为了避免每次修改启动文件，都去更改系统目录下的文件，故修改==rc.local==文件为如下内容，即创建一个用户的启动文件，并且有==rc.local==引导。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh -e</span></span><br><span class="line"></span><br><span class="line">/root/bin/rc-vae.sh &amp; </span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></li></ol><ul><li><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>相关的文件不要忘了加上==可执行==权限。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu-18-04-开机启动&quot;&gt;&lt;a href=&quot;#Ubuntu-18-04-开机启动&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 18.04 开机启动&quot;&gt;&lt;/a&gt;Ubuntu 18.04 开机启动&lt;/h1&gt;&lt;p&gt;Ubuntu 18.
      
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Python中XML的读写总结</title>
    <link href="http://yoursite.com/2018/08/17/Python%E4%B8%ADXML%E7%9A%84%E8%AF%BB%E5%86%99%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/08/17/Python中XML的读写总结/</id>
    <published>2018-08-16T16:00:00.000Z</published>
    <updated>2018-12-17T06:39:44.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于DOM"><a href="#基于DOM" class="headerlink" title="基于DOM"></a>基于DOM</h1><p>导入： <code>import xml.dom.minidom as minidom</code></p><h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><p>创建文档：<br><code>dom = minidom.getDOMImplementation().createDocument(None,&#39;Root&#39;,None)</code><br>获得根节点：<code>root = dom.documentElement</code><br>创建节点：<code>element = dom.createElement(&#39;Name&#39;)</code><br>给这个节点添加文本：<code>element.appendChild(dom.createTextNode(&#39;default&#39;))</code><br>注意：这里的节点文本值是存成另外一个节点的，是<code>createTextNode</code><br>设置属性：<code>element.setAttribute(&#39;age&#39;, &#39;20&#39;)</code><br>添加到节点：<code>root.appendChild(element)</code><br>完整代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> minidom</span><br><span class="line">dom = minidom.getDOMImplementation().createDocument(<span class="keyword">None</span>,<span class="string">'Root'</span>,<span class="keyword">None</span>)</span><br><span class="line">root = dom.documentElement</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    element = dom.createElement(<span class="string">'Name'</span>)</span><br><span class="line">    element.appendChild(dom.createTextNode(<span class="string">'default'</span>))</span><br><span class="line">    element.setAttribute(<span class="string">'age'</span>, str(i))</span><br><span class="line">    root.appendChild(element)</span><br><span class="line"><span class="comment"># 保存文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'default.xml'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    dom.writexml(f, addindent=<span class="string">'\t'</span>, newl=<span class="string">'\n'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文档内容</span></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;Root&gt;</span><br><span class="line">    &lt;Name age="0"&gt;default&lt;/Name&gt;</span><br><span class="line">    &lt;Name age="1"&gt;default&lt;/Name&gt;</span><br><span class="line">    &lt;Name age="2"&gt;default&lt;/Name&gt;</span><br><span class="line">    &lt;Name age="3"&gt;default&lt;/Name&gt;</span><br><span class="line">    &lt;Name age="4"&gt;default&lt;/Name&gt;</span><br><span class="line">&lt;/Root&gt;</span><br></pre></td></tr></table></figure></p><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>读取文档：<code>dom = minidom.parse(&#39;default.xml&#39;)</code><br>获得根节点：<code>root = dom.documentElement</code><br>按照名称查找子节点，注意这里会递归查找所有子节点：<code>names = root.getElementsByTagName(&#39;Name&#39;)</code><br>所有的子节点：<code>root.childNodes</code><br>注意：每个节点的文本值存在<code>TextNode</code>节点中，也就是最后一个节点的第一个子节点<br>查看是否含有属性：<code>name.hasAttribute(&#39;age&#39;)</code><br>查看属性：<code>name.getAttribute(&#39;age&#39;)</code><br>完整代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dom = minidom.parse(<span class="string">'default.xml'</span>)</span><br><span class="line">root = dom.documentElement</span><br><span class="line">names = root.getElementsByTagName(<span class="string">'Name'</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="comment"># 它的第一个子节点是一个textnode，存取的是真正的节点值</span></span><br><span class="line">    print(name.childNodes[<span class="number">0</span>].nodeValue, end=<span class="string">'\t'</span>)</span><br><span class="line">    <span class="keyword">if</span> name.hasAttribute(<span class="string">'age'</span>):</span><br><span class="line">        print(name.getAttribute(<span class="string">'age'</span>), end=<span class="string">'\t'</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">default <span class="number">0</span>   </span><br><span class="line">default <span class="number">1</span>   </span><br><span class="line">default <span class="number">2</span>   </span><br><span class="line">default <span class="number">3</span>   </span><br><span class="line">default <span class="number">4</span></span><br></pre></td></tr></table></figure></p><h1 id="基于ElementTree"><a href="#基于ElementTree" class="headerlink" title="基于ElementTree"></a>基于ElementTree</h1><p>导入：<code>import xml.etree.ElementTree as ET</code></p><h2 id="写入-1"><a href="#写入-1" class="headerlink" title="写入"></a>写入</h2><p>创建节点：<code>root = ET.Element(&#39;Root&#39;)</code><br>创建文档：<code>tree = ET.ElementTree(root)</code><br>设置文本值：<code>element.text = &#39;default&#39;</code><br>设置属性：<code>element.set(&#39;age&#39;, str(i))</code><br>添加节点：<code>root.append(element)</code><br>写入文档：<code>tree.write(&#39;default.xml&#39;, encoding=&#39;utf-8&#39;, xml_declaration=True)</code><br>但这样写入会有个问题，写入的<code>XML</code>会在同一行，缺少换行符，<code>Etree</code>本身并没有提供换行的选项，翻看了国外大神的回答，对<code>root</code>处理以后，再次写入将有换行符。完整代码如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="comment"># 增加换行符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__indent</span><span class="params">(elem, level=<span class="number">0</span>)</span>:</span></span><br><span class="line">    i = <span class="string">"\n"</span> + level*<span class="string">"\t"</span></span><br><span class="line">    <span class="keyword">if</span> len(elem):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> elem.text <span class="keyword">or</span> <span class="keyword">not</span> elem.text.strip():</span><br><span class="line">            elem.text = i + <span class="string">"\t"</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> elem.tail <span class="keyword">or</span> <span class="keyword">not</span> elem.tail.strip():</span><br><span class="line">            elem.tail = i</span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> elem:</span><br><span class="line">            __indent(elem, level+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> elem.tail <span class="keyword">or</span> <span class="keyword">not</span> elem.tail.strip():</span><br><span class="line">            elem.tail = i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> level <span class="keyword">and</span> (<span class="keyword">not</span> elem.tail <span class="keyword">or</span> <span class="keyword">not</span> elem.tail.strip()):</span><br><span class="line">            elem.tail = i</span><br><span class="line"></span><br><span class="line">root = ET.Element(<span class="string">'Root'</span>)       <span class="comment"># 创建节点</span></span><br><span class="line">tree = ET.ElementTree(root)     <span class="comment"># 创建文档</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    element = ET.Element(<span class="string">'Name'</span>)</span><br><span class="line">    element.set(<span class="string">'age'</span>, str(i))</span><br><span class="line">    element.text = <span class="string">'default'</span></span><br><span class="line">    root.append(element)</span><br><span class="line"></span><br><span class="line">__indent(root)          <span class="comment"># 增加换行符</span></span><br><span class="line">tree.write(<span class="string">'default.xml'</span>, encoding=<span class="string">'utf-8'</span>, xml_declaration=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文档内容</span></span><br><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span><br><span class="line">&lt;Root&gt;</span><br><span class="line">    &lt;Name age="0"&gt;default&lt;/Name&gt;</span><br><span class="line">    &lt;Name age="1"&gt;default&lt;/Name&gt;</span><br><span class="line">    &lt;Name age="2"&gt;default&lt;/Name&gt;</span><br><span class="line">    &lt;Name age="3"&gt;default&lt;/Name&gt;</span><br><span class="line">    &lt;Name age="4"&gt;default&lt;/Name&gt;</span><br><span class="line">&lt;/Root&gt;</span><br></pre></td></tr></table></figure></p><h2 id="读取-1"><a href="#读取-1" class="headerlink" title="读取"></a>读取</h2><p>读取文档：<code>tree = ET.parse(&#39;default.xml&#39;)</code><br>获得根节点：<code>root = tree.getroot()</code><br>获得所有子节点：<code>list(root)</code><br>查找子节点，注意这里不会递归查找所有子节点：<code>root.findall(&#39;Name&#39;)</code><br>查找子节点，递归查找所有子节点：<code>root.iter(&#39;Name&#39;)</code><br>查看节点名称：<code>root.tag</code><br>全部代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">tree = ET.parse(<span class="string">'default.xml'</span>)</span><br><span class="line">root = tree.getroot()</span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> list(root):</span><br><span class="line">    print(node.text, node.tag, node.get(<span class="string">'age'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> root.findall(<span class="string">'Name'</span>):</span><br><span class="line">    print(node.text, node.tag, node.get(<span class="string">'age'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">default Name <span class="number">0</span></span><br><span class="line">default Name <span class="number">1</span></span><br><span class="line">default Name <span class="number">2</span></span><br><span class="line">default Name <span class="number">3</span></span><br><span class="line">default Name <span class="number">4</span></span><br><span class="line">default Name <span class="number">0</span></span><br><span class="line">default Name <span class="number">1</span></span><br><span class="line">default Name <span class="number">2</span></span><br><span class="line">default Name <span class="number">3</span></span><br><span class="line">default Name <span class="number">4</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于DOM&quot;&gt;&lt;a href=&quot;#基于DOM&quot; class=&quot;headerlink&quot; title=&quot;基于DOM&quot;&gt;&lt;/a&gt;基于DOM&lt;/h1&gt;&lt;p&gt;导入： &lt;code&gt;import xml.dom.minidom as minidom&lt;/code&gt;&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Event事件机制</title>
    <link href="http://yoursite.com/2018/07/11/Event%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/07/11/Event事件机制/</id>
    <published>2018-07-10T16:00:00.000Z</published>
    <updated>2018-12-17T06:39:26.274Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-事件类"><a href="#1-事件类" class="headerlink" title="1.事件类"></a>1.事件类</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">QAbstractEventDispatcher        <span class="comment">//Interface to manage Qt's event queue</span></span><br><span class="line">QBasicTimer                     <span class="comment">//Timer events for objects</span></span><br><span class="line">QChildEvent                     <span class="comment">//Contains event parameters for child object events</span></span><br><span class="line">QDynamicPropertyChangeEvent     <span class="comment">//Contains event parameters for dynamic property change events</span></span><br><span class="line">QEvent          <span class="comment">//The base class of all event classes. Event objects contain event parameters</span></span><br><span class="line">QTimerEvent                     <span class="comment">//Contains parameters that describe a timer event</span></span><br><span class="line">QTimer                          <span class="comment">//Repetitive and single-shot timers</span></span><br><span class="line">QActionEvent            <span class="comment">//Event that is generated when a QAction is added, removed, or changed</span></span><br><span class="line">QCloseEvent             <span class="comment">//Contains parameters that describe a close event</span></span><br><span class="line">QContextMenuEvent       <span class="comment">//Contains parameters that describe a context menu event</span></span><br><span class="line">QDragEnterEvent         <span class="comment">//Event which is sent to a widget when a drag and drop action enters it</span></span><br><span class="line">QDragLeaveEvent         <span class="comment">//Event that is sent to a widget when a drag and drop action leaves it</span></span><br><span class="line">QDragMoveEvent          <span class="comment">//Event which is sent while a drag and drop action is in progress</span></span><br><span class="line">QDropEvent              <span class="comment">//Event which is sent when a drag and drop action is completed</span></span><br><span class="line">QEnterEvent             <span class="comment">//Contains parameters that describe an enter event</span></span><br><span class="line">QExposeEvent            <span class="comment">//Contains event parameters for expose events</span></span><br><span class="line">QFileOpenEvent      <span class="comment">//Event that will be sent when there is a request to open a file or a URL</span></span><br><span class="line">QFocusEvent         <span class="comment">//Contains event parameters for widget focus events</span></span><br><span class="line">QHelpEvent      <span class="comment">//Event that is used to request helpful information about a particular point in a widget</span></span><br><span class="line">QHideEvent      <span class="comment">//Event which is sent after a widget is hidden</span></span><br><span class="line">QHoverEvent     <span class="comment">//Contains parameters that describe a mouse event</span></span><br><span class="line">QIconDragEvent  <span class="comment">//Indicates that a main icon drag has begun</span></span><br><span class="line">QInputEvent     <span class="comment">//The base class for events that describe user input</span></span><br><span class="line">QInputMethodEvent       <span class="comment">//Parameters for input method events</span></span><br><span class="line">QKeyEvent               <span class="comment">//Describes a key event</span></span><br><span class="line">QMouseEvent             <span class="comment">//Contains parameters that describe a mouse event</span></span><br><span class="line">QMoveEvent              <span class="comment">//Contains event parameters for move events</span></span><br><span class="line">QNativeGestureEvent     <span class="comment">//Contains parameters that describe a gesture event</span></span><br><span class="line">QPaintEvent             <span class="comment">//Contains event parameters for paint events</span></span><br><span class="line">QPlatformSurfaceEvent       <span class="comment">//Used to notify about native platform surface events</span></span><br><span class="line">QPointingDeviceUniqueId     <span class="comment">//Identifies a unique object, such as a tagged token or stylus, which is used with a pointing device</span></span><br><span class="line">QResizeEvent            <span class="comment">//Contains event parameters for resize events</span></span><br><span class="line">QScrollEvent            <span class="comment">//Sent when scrolling</span></span><br><span class="line">QScrollPrepareEvent     <span class="comment">//Sent in preparation of scrolling</span></span><br><span class="line">QShortcutEvent          <span class="comment">//Event which is generated when the user presses a key combination</span></span><br><span class="line">QShowEvent              <span class="comment">//Event that is sent when a widget is shown</span></span><br><span class="line">QStatusTipEvent         <span class="comment">//Event that is used to show messages in a status bar</span></span><br><span class="line">QTabletEvent            <span class="comment">//Contains parameters that describe a Tablet event</span></span><br><span class="line">QTouchEvent             <span class="comment">//Contains parameters that describe a touch event</span></span><br><span class="line">QWhatsThisClickedEvent  <span class="comment">//Event that can be used to handle hyperlinks in a "What's This?" text</span></span><br><span class="line">QWheelEvent             <span class="comment">//Contains parameters that describe a wheel event</span></span><br><span class="line">QWindowStateChangeEvent         <span class="comment">//The window state before a window state change</span></span><br><span class="line">QGestureEvent                   <span class="comment">//The description of triggered gestures</span></span><br><span class="line">QShortcut                       <span class="comment">//Used to create keyboard shortcuts</span></span><br></pre></td></tr></table></figure><h4 id="2-事件函数"><a href="#2-事件函数" class="headerlink" title="2.事件函数"></a>2.事件函数</h4><p>今天要说的是event()函数。记得之前曾经提到过这个函数，说在事件对象创建完毕后，Qt将这个事件对象传递给QObject的event()函数。event()函数并不直接处理事件，而是将这些事件对象按照它们不同的类型，分发给不同的事件处理器(event handler)。</p><p>event()函数主要用于事件的分发，所以，如果你希望在事件分发之前做一些操作，那么，就需要注意这个event()函数了。为了达到这种目的，我们可以重写event()函数。例如，如果你希望在窗口中的tab键按下时将焦点移动到下一组件，而不是让具有焦点的组件处理，那么你就可以继承QWidget，并重写它的event()函数，已达到这个目的：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> MyWidget::event(QEvent *event) &#123;</span><br><span class="line">        <span class="keyword">if</span> (event-&gt;type() == QEvent::KeyPress) &#123;</span><br><span class="line">                QKeyEvent *keyEvent = <span class="keyword">static_cast</span>&lt;QKeyEvent *&gt;(event);</span><br><span class="line">                <span class="keyword">if</span> (keyEvent-&gt;key() == Qt::Key_Tab) &#123;</span><br><span class="line">                        <span class="comment">// 处理Tab鍵</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> QWidget::event(event);</span><br></pre></td></tr></table></figure></p><h4 id="3-事件过滤机制"><a href="#3-事件过滤机制" class="headerlink" title="3.事件过滤机制"></a>3.事件过滤机制</h4><p>Qt创建了QEvent事件对象之后，会调用QObject的event()函数做事件的分发。有时候，你可能需要在调用event()函数之前做一些另外的操作，比如，对话框上某些组件可能并不需要响应回车按下的事件，此时，你就需要重新定义组件的event()函数。如果组件很多，就需要重写很多次event()函数，这显然没有效率。为此，你可以使用一个事件过滤器，来判断是否需要调用event()函数。</p><p>QOjbect有一个eventFilter()函数，用于建立事件过滤器。这个函数的签名如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> <span class="keyword">bool</span> QObject::eventFilter(QObject *obj, QEvent *event);</span><br></pre></td></tr></table></figure></p><p>如果obj对象安装了事件过滤器，这个函数会被调用并进行事件过滤，然后才轮到组件进行事件处理。在重写这个函数时，如果你需要过滤掉某个事件，例如停止对这个事件的响应，需要返回true。</p><p>上面的例子中为MainWindow建立了一个事件过滤器。为了过滤某个组件上的事件，首先需要判断这个对象是哪个组件，然后判断这个事件的类型。例如，我不想让textEdit组件处理键盘事件，于是就首先找到这个组件，如果这个事件是键盘事件，则直接返回true，也就是过滤掉了这个事件，其他事件还是要继续处理，所以返回false。对于其他组件，我们并不保证是不是还有过滤器，于是最保险的办法是调用父类的函数。</p><p>在创建了过滤器之后，下面要做的是安装这个过滤器。安装过滤器需要调用installEventFilter()函数。这个函数的签名如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> QObject::installEventFilter(QObject *obj);</span><br></pre></td></tr></table></figure></p><p>这个函数是QObject的一个函数，因此可以安装到任何QObject的子类，并不仅仅是UI组件。这个函数接收一个QObject对象，调用了这个函数安装事件过滤器的组件会调用filterObj定义的eventFilter()函数。例如，textField.installEventFilter(obj)，则如果有事件发送到textField组件是，会先调用obj-&gt;eventFilter()函数，然后才会调用textField.event()。</p><p>当然，你也可以把事件过滤器安装到QApplication上面，这样就可以过滤所有的事件，已获得更大的控制权。不过，这样做的后果就是会降低事件分发的效率。</p><p>如果一个组件安装了多个过滤器，则最后一个安装的会最先调用，类似于堆栈的行为。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-事件类&quot;&gt;&lt;a href=&quot;#1-事件类&quot; class=&quot;headerlink&quot; title=&quot;1.事件类&quot;&gt;&lt;/a&gt;1.事件类&lt;/h4&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5中异步刷新UI和Python中的多线程总结</title>
    <link href="http://yoursite.com/2018/07/06/PyQt5%E4%B8%AD%E5%BC%82%E6%AD%A5%E5%88%B7%E6%96%B0UI%E5%92%8CPython%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/07/06/PyQt5中异步刷新UI和Python中的多线程总结/</id>
    <published>2018-07-05T16:00:00.000Z</published>
    <updated>2018-12-17T06:39:34.720Z</updated>
    
    <content type="html"><![CDATA[<p>PyQt<br>PyQt简介<br>PyQt是Qt的python接口，PyQt的文档较少，但接口和函数可以完全参照Qt，继承了Qt中大量的控件以及信号机制，十分方便。以下简介一个基本的PyQt程序。 </p><ul><li>需要导入的类主要来自三个包 </li><li>from PyQt5.QtWidgets import 常用的控件 </li><li>PyQt5.QtCore 核心功能类，如QT，QThread，pyqtSignal </li><li>PyQt5.QtGui UI类，如QFont </li><li>基础的程序结构：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super()__init__()</span><br><span class="line">        self.setupUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUI</span><span class="params">()</span>:</span></span><br><span class="line">        self.show()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># 设置UI</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv) <span class="comment"># 启动app</span></span><br><span class="line">    ex = Example()   <span class="comment"># 实例化一个自己派生的</span></span><br><span class="line">    <span class="comment"># 也可以实例化库中的控件</span></span><br><span class="line">    <span class="comment"># q = QPushButton()</span></span><br><span class="line">    <span class="comment"># q.show()</span></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></li></ul><p>总体来说： </p><ol><li>首先实例化APP </li><li>实例化预定义控件或者自己派生自库中的控件，记得调用show()函数 </li><li>执行并安全退出</li></ol><p>Python中的多线程<br>python中的多线程使用较为方便，主要使用threading.Thread类： </p><ol><li>线程启动使用start()函数 </li><li>如果需要等待线程执行使用join，这样主线程会阻塞<h3 id="实现方式一"><a href="#实现方式一" class="headerlink" title="实现方式一"></a>实现方式一</h3></li></ol><p>直接传入函数，启动线程，可以传入参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threadFunction</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="number">11111</span>)</span><br><span class="line">        time.sleep()</span><br><span class="line"><span class="comment"># 用于命名，可以通过threading.current_thread().name获得</span></span><br><span class="line">t = threading.Thread(target=threadFunction, name=<span class="string">'funciton'</span>)</span><br><span class="line"><span class="comment"># 如果线程有参数</span></span><br><span class="line">t = threading.Thread(target=threadFunction, args=(), name=<span class="string">'funciton'</span>)</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure></p><h3 id="实现方式二"><a href="#实现方式二" class="headerlink" title="实现方式二"></a>实现方式二</h3><p>继承<code>Thread</code>，重写<code>run</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="number">11111111</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = Example()</span><br><span class="line">    a.start()</span><br><span class="line">    a.join()</span><br><span class="line">    print(<span class="number">222222222</span>)</span><br></pre></td></tr></table></figure></p><p>注意：<br>1. 使用<code>join</code>方法会让主线程阻塞在这里，等待子线程结束，在里面可以设置阻塞的时间 </p><ol start="2"><li><code>a.setDaemon(True)</code>在<code>start</code>前设置，可以保证在主线程终止时，子线程也终止</li></ol><h2 id="信号机制"><a href="#信号机制" class="headerlink" title="信号机制"></a>信号机制</h2><p><code>QT</code>中的信号机制能够方便的编写回调。<br>1. 很多控件都有预定的信号如<code>clicked</code>，直接使用<code>clicked.connect</code>连接槽函数即可。<br>2. 继承自Qt的类，然后自定义一个<code>signal</code>类变量，在实例连接信号就可以了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    signal = pyqtSignal()    <span class="comment"># 括号里填写信号传递的参数</span></span><br><span class="line">    <span class="comment"># 发射信号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.signal.emit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用信号</span></span><br><span class="line">a = Example()</span><br><span class="line">a.signal.connect(callback)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 槽函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h2 id="UI刷新"><a href="#UI刷新" class="headerlink" title="UI刷新"></a>UI刷新</h2><p>在界面中，通常用会有一些按钮，点击后触发事件，比如去下载一个文件或者做一些操作，这些操作会耗时，如果不能及时结束，主线程将会阻塞，这样界面就会出现未响应的状态，因此必须使用多线程来解决这个问题。<br>注意：</p><ol><li>PyQt5不能在子线程中刷新线程，这样会造成界面卡死，因此不能使用常规的多线程刷新UI。 </li><li>但是又必须要实现子线程和主线程之间的通信，否则无法得知任务是否完成。因此使用PyQt5中的QThread，这样既可以使用信号机制，又能够使用多线程。 </li><li>当启动多线程后，注册信号，槽函数为主线程中的函数，当任务完成后，发射信号，在主线程中对UI进行更新。</li></ol><p>注：由于需要注册信号，thread需要是继承自QThread的类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QThread)</span>:</span></span><br><span class="line">    signal = pyqtSignal()    <span class="comment"># 括号里填写信号传递的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.wait()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 进行任务操作</span></span><br><span class="line">        self.signal.emit()    <span class="comment"># 发射信号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UI类中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buttonClick</span><span class="params">(self)</span></span></span><br><span class="line">    self.thread = Example()</span><br><span class="line">    self.thread.signal.connect(self.callback)</span><br><span class="line">    self.thread.start()    <span class="comment"># 启动线程</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callbakc</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">--------------------- </span><br><span class="line">作者：新安浅滩 </span><br><span class="line">来源：CSDN </span><br><span class="line">原文：https://blog.csdn.net/hu694028833/article/details/<span class="number">80977302</span> </span><br><span class="line">版权声明：本文为博主原创文章，转载请附上博文链接！</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PyQt&lt;br&gt;PyQt简介&lt;br&gt;PyQt是Qt的python接口，PyQt的文档较少，但接口和函数可以完全参照Qt，继承了Qt中大量的控件以及信号机制，十分方便。以下简介一个基本的PyQt程序。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要导入的类主要来自三个包 &lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式整理</title>
    <link href="http://yoursite.com/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/08/正则表达式整理/</id>
    <published>2018-04-07T16:00:00.000Z</published>
    <updated>2018-12-17T06:38:57.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-常用正则表达式"><a href="#1-常用正则表达式" class="headerlink" title="1. 常用正则表达式"></a>1. 常用正则表达式</h2><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>\r, \n</td><td>代表回车和换行符</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\</td><td>代表 “\” 本身</td></tr><tr><td>\^</td><td>匹配 ^ 符号本身</td></tr><tr><td>$</td><td>匹配 $ 符号本身</td></tr></tbody></table><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除了换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线、汉字</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\b</td><td>单词的开始或结尾</td></tr><tr><td>~</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><p>如：<br>\ba\w\b ：匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w)，最后是单词结束处(\b)。</p><p>\d+ ：匹配1个或更多连续的数字。这里的+是和类似的元字符，不同的是匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。</p><p>\b\w{6}\b： 匹配刚好6个字符的单词。</p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>[ ]</td><td>包含一系列字符</td></tr><tr><td>[^ ]</td><td>包含之外一系列字符</td></tr></tbody></table><p>[ab5@]匹配a” 或 “b” 或 “5” 或 “@</p><p>[^abc]： 包含abc之外的任意字符</p><p>[f-k]f-k之间的任意字符<br>| 表达式 | 说明 |<br>| — | — |<br>| {n} | 表达式重复n次，比如：<a href="http://www.regexlab.com/zh/workshop.asp?pat=/w%7B2%7D&amp;txt=ab+c6" target="_blank" rel="noopener">“\w{2}” 相当于 “\w\w”</a>；<a href="http://www.regexlab.com/zh/workshop.asp?pat=a%7B5%7D&amp;txt=bbaaaaaddee" target="_blank" rel="noopener">“a{5}” 相当于 “aaaaa”</a> |<br>| {m,n} | 表达式至少重复m次，最多重复n次，比如：<a href="http://www.regexlab.com/zh/workshop.asp?pat=ba%7B1,3%7D&amp;txt=a,baaa,baa,b,ba" target="_blank" rel="noopener">“ba{1,3}”可以匹配 “ba”或”baa”或”baaa</a> |<br>| {m,} | 表达式至少重复m次，比如：<a href="http://www.regexlab.com/zh/workshop.asp?pat=/w/d%7B2,%7D&amp;txt=b1,a12,_456,_4AA,M12344,12346546547446534543543" target="_blank" rel="noopener">“\w\d{2,}”可以匹配 “a12”,”_456”,”M12344”…</a> |<br>| ? | 匹配表达式0次或者1次，相当于 {0,1}，比如：<a href="http://www.regexlab.com/zh/workshop.asp?pat=a%5Bcd%5D%3F&amp;txt=a,c,d,ac,ad" target="_blank" rel="noopener">“a[cd]?”可以匹配 “a”,”ac”,”ad”</a> |<br>| + | 表达式至少出现1次，相当于 {1,}，比如：<a href="http://www.regexlab.com/zh/workshop.asp?pat=a%2Bb&amp;txt=a%2Cb%2Cab%2Caab%2Caaab" target="_blank" rel="noopener">“a+b”可以匹配 “ab”,”aab”,”aaab”…</a> |<br>| <em> | 表达式不出现或出现任意次，相当于 {0,}，比如：[“\^</em>b”可以匹配 “b”,”^^^b”…](<a href="http://www.regexlab.com/zh/workshop.asp?pat=%5C%5E*b&amp;txt=%5E%2Cb%2C%5E%5E%5Eb%2C%5E%5E%5E%5E%5E%5E%5Eb" target="_blank" rel="noopener">http://www.regexlab.com/zh/workshop.asp?pat=%5C%5E*b&amp;txt=%5E%2Cb%2C%5E%5E%5Eb%2C%5E%5E%5E%5E%5E%5E%5Eb</a>) |</p><h2 id="2-Qt-中使用正则表达式"><a href="#2-Qt-中使用正则表达式" class="headerlink" title="2.Qt 中使用正则表达式"></a>2.Qt 中使用正则表达式</h2><p>​ Qt 用QRegExp 来封装正则表达式。如： QRegExp rx(“^[0-9]+(.\d+)?$”);</p><p>例如我们又这个一个有规则的字符串：价格:数量:商家编码:属性名:属性值;属性名:属性值; 价格:数量:商家编码:属性名:属性值;属性名:属性值;属性名:属性值; 价格:数量:商家编码:属性名:属性值;</p><p>想要分成：</p><p>价格:数量:商家编码:属性名:属性值;属性名:属性值;<br>价格:数量:商家编码:属性名:属性值;属性名:属性值;属性名:属性值;<br>价格:数量:商家编码:属性名:属性值;</p><p>首先选择合适的正则表达式：(\w:){3}(\w:\w*;)+， 然后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QRegExp <span class="title">rx</span><span class="params">(tr(<span class="string">"(\w:)&#123;3&#125;(\w:\w*;)+"</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pos</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = rx.indexIn(str, pos)) != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">strList.push_back(rx.capturedTexts().at(<span class="number">0</span>));</span><br><span class="line">pos += rx.matchedLength();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 strList 就是想要的结果了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-常用正则表达式&quot;&gt;&lt;a href=&quot;#1-常用正则表达式&quot; class=&quot;headerlink&quot; title=&quot;1. 常用正则表达式&quot;&gt;&lt;/a&gt;1. 常用正则表达式&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;说明&lt;/t
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Sqlalchemy automap Demo</title>
    <link href="http://yoursite.com/2018/03/06/Sqlalchemy%20automap%20Demo/"/>
    <id>http://yoursite.com/2018/03/06/Sqlalchemy automap Demo/</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2018-12-17T06:37:56.067Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Table, Column, Integer, String, MetaData, ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.automap <span class="keyword">import</span> automap_base</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    engine_str = <span class="string">"mysql+pymysql://user:password@host:port/employees?charset=utf8mb4"</span></span><br><span class="line">    engine = create_engine(engine_str, echo=<span class="keyword">True</span>)</span><br><span class="line">    session = Session(engine)</span><br><span class="line">    Base = automap_base()</span><br><span class="line">    Base.prepare(engine, reflect=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询测试</span></span><br><span class="line">result = session.query(Base.classes.user).all()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    print(i.id)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># orm 映射</span></span><br><span class="line">User = Base.classes.user</span><br><span class="line">Customers = Base.classes.Customers</span><br><span class="line">Orders = Base.classes.Orders</span><br><span class="line"> </span><br><span class="line">result = session.query(Customers, Orders).filter_by(cust_id=<span class="number">1000000001</span>).first()</span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="keyword">if</span> isinstance(i, Customers):</span><br><span class="line">        print(i.cust_name)</span><br><span class="line">    <span class="keyword">if</span> isinstance(i, Orders):</span><br><span class="line">        print(i.order_date)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="SQLAlchemy" scheme="http://yoursite.com/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>Python 线程池/进程池 内存管理</title>
    <link href="http://yoursite.com/2018/03/03/Python%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%20%E8%BF%9B%E7%A8%8B%E6%B1%A0%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/03/03/Python 线程池 进程池 内存管理/</id>
    <published>2018-03-02T16:00:00.000Z</published>
    <updated>2018-12-17T06:37:45.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="concurrent-futures-线程池-进程池内存管理"><a href="#concurrent-futures-线程池-进程池内存管理" class="headerlink" title="concurrent.futures 线程池/进程池内存管理"></a>concurrent.futures 线程池/进程池内存管理</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>之前进行爬虫任务的时候遇到了这么一个需求，1G 内存的机器跑爬虫，爬取一个网站的数据，之前使用的是这样一种方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> futures = list()</span><br><span class="line"> <span class="keyword">with</span> ThreadPool(max_workers=<span class="number">20</span>) <span class="keyword">as</span> exc:</span><br><span class="line">      <span class="keyword">for</span> tr <span class="keyword">in</span> table.select(<span class="string">"tr"</span>):</span><br><span class="line"></span><br><span class="line">          <span class="comment"># 取线程执行结果</span></span><br><span class="line">          future = exc.submit(self.get_asn, tr.strings)</span><br><span class="line">          futures.append(future)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 as_completed 异步方式处理完成任务的线程</span></span><br><span class="line"><span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">    result = future.result()</span><br><span class="line">    <span class="comment"># 拼接 asn.json 的 path</span></span><br><span class="line">    file_path = result[<span class="string">"asn"</span>] + <span class="string">".json"</span></span><br><span class="line">    asn_file = os.path.join(self.base_data_path, file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(asn_file, <span class="string">"w"</span>, encoding=<span class="string">"utf8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(result))</span><br></pre></td></tr></table></figure></p><p>使用了 concurrent.futures 的 ThreadPoolExecutor submit 方法，因为开启了20个线程同时爬取，连接网站的速度还很快，任务很快就被处理完成了，可以看到我时完成一个任务的时候就进行写文件了操作，但是2分钟后很快程序就终止了，监控程序发现时由于程序内存占用达到 80% 被系统 Kill 掉了。</p><ul><li>为什么内存会爆呢？监控内存显示，程序处理完任务之后，内存并没有被立刻释放，而是有很长时间延迟之后才被释放（ 在此吐槽 python GC）</li></ul><h2 id="改进方法："><a href="#改进方法：" class="headerlink" title="改进方法："></a>改进方法：</h2><blockquote><p>参考 <a href="https://stackoverflow.com/questions/34770169/using-concurrent-futures-without-running-out-of-ram" target="_blank" rel="noopener">https://stackoverflow.com/questions/34770169/using-concurrent-futures-without-running-out-of-ram</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许同时进行的工作数</span></span><br><span class="line">MAX_JOBS_IN_QUEUE = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tr_list = table.select(<span class="string">"tr"</span>)</span><br><span class="line">tr_left = len(tr_list) - <span class="number">1</span>  <span class="comment"># &lt;----</span></span><br><span class="line">tr_iter = iter(tr_list)  <span class="comment"># &lt;------</span></span><br><span class="line">jobs = dict()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">with</span> ThreadPool(max_workers=<span class="number">20</span>) <span class="keyword">as</span> exc:</span><br><span class="line">      <span class="keyword">while</span> tr_left:</span><br><span class="line">          print(<span class="string">"#"</span> * <span class="number">100</span>, <span class="string">"TASK: &#123;&#125; &lt;===&gt;  JOB: &#123;&#125;"</span>.format(tr_left, len(jobs)))</span><br><span class="line">          <span class="keyword">for</span> tr <span class="keyword">in</span> tr_iter:</span><br><span class="line">              <span class="comment"># 取线程执行结果</span></span><br><span class="line">              job = exc.submit(self.get_asn, tr.strings)</span><br><span class="line">              jobs[job] = tr</span><br><span class="line">              <span class="keyword">if</span> len(jobs) &gt; MAX_JOBS_IN_QUEUE:</span><br><span class="line">                  <span class="keyword">break</span>  <span class="comment"># limit the job submission for now job</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># 使用 as_completed 异步方式处理任务线程</span></span><br><span class="line">          <span class="keyword">for</span> job <span class="keyword">in</span> as_completed(jobs):</span><br><span class="line">              tr_left -= <span class="number">1</span>  <span class="comment"># one down - many to go...   &lt;---</span></span><br><span class="line">              result = job.result()</span><br><span class="line">              <span class="comment"># 从字典中删除结果，因为我们不需要存储它</span></span><br><span class="line">              <span class="keyword">del</span> jobs[job]</span><br><span class="line"></span><br><span class="line">              <span class="comment"># 拼接 asn.json 的 path</span></span><br><span class="line">              file_path = result[<span class="string">"asn"</span>] + <span class="string">".json"</span></span><br><span class="line">              asn_file = os.path.join(self.base_data_path, file_path)</span><br><span class="line"></span><br><span class="line">              <span class="keyword">with</span> open(asn_file, <span class="string">"w"</span>, encoding=<span class="string">"utf8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                  f.write(json.dumps(result))</span><br><span class="line">              <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p></blockquote><p>改进后内存在切换 html 爬取的时候，会偶尔会升高一下，最高 65%，平均在 35% 左右。</p><ul><li>ProcessPoolExecutor 进程同理</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;concurrent-futures-线程池-进程池内存管理&quot;&gt;&lt;a href=&quot;#concurrent-futures-线程池-进程池内存管理&quot; class=&quot;headerlink&quot; title=&quot;concurrent.futures 线程池/进程池内存管理&quot;&gt;
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy 插入 性能 速度 比较</title>
    <link href="http://yoursite.com/2018/01/27/SQLAlchemy%20%E6%8F%92%E5%85%A5%20%E6%80%A7%E8%83%BD%20%E9%80%9F%E5%BA%A6%20%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2018/01/27/SQLAlchemy 插入 性能 速度 比较/</id>
    <published>2018-01-26T16:00:00.000Z</published>
    <updated>2018-12-17T06:37:37.616Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String,  create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> scoped_session, sessionmaker</span><br><span class="line"> </span><br><span class="line">Base = declarative_base()</span><br><span class="line">DBSession = scoped_session(sessionmaker())</span><br><span class="line">engine = <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"customer"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">255</span>))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_sqlalchemy</span><span class="params">(dbname=<span class="string">'sqlite:///sqlalchemy.db'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> engine</span><br><span class="line">    engine = create_engine(dbname, echo=<span class="keyword">False</span>)</span><br><span class="line">    DBSession.remove()</span><br><span class="line">    DBSession.configure(bind=engine, autoflush=<span class="keyword">False</span>, expire_on_commit=<span class="keyword">False</span>)</span><br><span class="line">    Base.metadata.drop_all(engine)</span><br><span class="line">    Base.metadata.create_all(engine)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sqlalchemy_orm</span><span class="params">(n=<span class="number">100000</span>)</span>:</span></span><br><span class="line">    init_sqlalchemy()</span><br><span class="line">    t0 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span><br><span class="line">        customer = Customer()</span><br><span class="line">        customer.name = <span class="string">'NAME '</span> + str(i)</span><br><span class="line">        DBSession.add(customer)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            DBSession.flush()</span><br><span class="line">    DBSession.commit()</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"SQLAlchemy ORM: Total time for "</span> + str(n) +</span><br><span class="line">        <span class="string">" records "</span> + str(time.time() - t0) + <span class="string">" secs"</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sqlalchemy_orm_pk_given</span><span class="params">(n=<span class="number">100000</span>)</span>:</span></span><br><span class="line">    init_sqlalchemy()</span><br><span class="line">    t0 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span><br><span class="line">        customer = Customer(id=i+<span class="number">1</span>, name=<span class="string">"NAME "</span> + str(i))</span><br><span class="line">        DBSession.add(customer)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            DBSession.flush()</span><br><span class="line">    DBSession.commit()</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"SQLAlchemy ORM pk given: Total time for "</span> + str(n) +</span><br><span class="line">        <span class="string">" records "</span> + str(time.time() - t0) + <span class="string">" secs"</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sqlalchemy_orm_bulk_save_objects</span><span class="params">(n=<span class="number">100000</span>)</span>:</span></span><br><span class="line">    init_sqlalchemy()</span><br><span class="line">    t0 = time.time()</span><br><span class="line">    n1 = n</span><br><span class="line">    <span class="keyword">while</span> n1 &gt; <span class="number">0</span>:</span><br><span class="line">        n1 = n1 - <span class="number">10000</span></span><br><span class="line">        DBSession.bulk_save_objects(</span><br><span class="line">            [</span><br><span class="line">                Customer(name=<span class="string">"NAME "</span> + str(i))</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> xrange(min(<span class="number">10000</span>, n1))</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">    DBSession.commit()</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"SQLAlchemy ORM bulk_save_objects(): Total time for "</span> + str(n) +</span><br><span class="line">        <span class="string">" records "</span> + str(time.time() - t0) + <span class="string">" secs"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sqlalchemy_orm_bulk_insert</span><span class="params">(n=<span class="number">100000</span>)</span>:</span></span><br><span class="line">    init_sqlalchemy()</span><br><span class="line">    t0 = time.time()</span><br><span class="line">    n1 = n</span><br><span class="line">    <span class="keyword">while</span> n1 &gt; <span class="number">0</span>:</span><br><span class="line">        n1 = n1 - <span class="number">10000</span></span><br><span class="line">        DBSession.bulk_insert_mappings(</span><br><span class="line">            Customer,</span><br><span class="line">            [</span><br><span class="line">                dict(name=<span class="string">"NAME "</span> + str(i))</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> xrange(min(<span class="number">10000</span>, n1))</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">    DBSession.commit()</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"SQLAlchemy ORM bulk_insert_mappings(): Total time for "</span> + str(n) +</span><br><span class="line">        <span class="string">" records "</span> + str(time.time() - t0) + <span class="string">" secs"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sqlalchemy_core</span><span class="params">(n=<span class="number">100000</span>)</span>:</span></span><br><span class="line">    init_sqlalchemy()</span><br><span class="line">    t0 = time.time()</span><br><span class="line">    engine.execute(</span><br><span class="line">        Customer.__table__.insert(),</span><br><span class="line">        [&#123;<span class="string">"name"</span>: <span class="string">'NAME '</span> + str(i)&#125; <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n)]</span><br><span class="line">    )</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"SQLAlchemy Core: Total time for "</span> + str(n) +</span><br><span class="line">        <span class="string">" records "</span> + str(time.time() - t0) + <span class="string">" secs"</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_sqlite3</span><span class="params">(dbname)</span>:</span></span><br><span class="line">    conn = sqlite3.connect(dbname)</span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    c.execute(<span class="string">"DROP TABLE IF EXISTS customer"</span>)</span><br><span class="line">    c.execute(</span><br><span class="line">        <span class="string">"CREATE TABLE customer (id INTEGER NOT NULL, "</span></span><br><span class="line">        <span class="string">"name VARCHAR(255), PRIMARY KEY(id))"</span>)</span><br><span class="line">    conn.commit()</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sqlite3</span><span class="params">(n=<span class="number">100000</span>, dbname=<span class="string">'sqlite3.db'</span>)</span>:</span></span><br><span class="line">    conn = init_sqlite3(dbname)</span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    t0 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span><br><span class="line">        row = (<span class="string">'NAME '</span> + str(i),)</span><br><span class="line">        c.execute(<span class="string">"INSERT INTO customer (name) VALUES (?)"</span>, row)</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"sqlite3: Total time for "</span> + str(n) +</span><br><span class="line">        <span class="string">" records "</span> + str(time.time() - t0) + <span class="string">" sec"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_sqlalchemy_orm(<span class="number">100000</span>)</span><br><span class="line">    test_sqlalchemy_orm_pk_given(<span class="number">100000</span>)</span><br><span class="line">    test_sqlalchemy_orm_bulk_save_objects(<span class="number">100000</span>)</span><br><span class="line">    test_sqlalchemy_orm_bulk_insert(<span class="number">100000</span>)</span><br><span class="line">    test_sqlalchemy_core(<span class="number">100000</span>)</span><br><span class="line">    test_sqlite3(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure><p>上面代码分别使用了orm， orm带主键，orm的bulk_save_objects, orm的bulk_insert_mappings, 非orm形式，原生的dbapi方式；插入10000条记录的结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SQLAlchemy ORM: Total time <span class="keyword">for</span> <span class="number">100000</span> records <span class="number">7.2070479393</span> secs</span><br><span class="line">SQLAlchemy ORM pk given: Total time <span class="keyword">for</span> <span class="number">100000</span> records <span class="number">4.28471207619</span> secs</span><br><span class="line">SQLAlchemy ORM bulk_save_objects(): Total time <span class="keyword">for</span> <span class="number">100000</span> records <span class="number">1.58296084404</span> secs</span><br><span class="line">SQLAlchemy ORM bulk_insert_mappings(): Total time <span class="keyword">for</span> <span class="number">100000</span> records <span class="number">0.453973054886</span> secs</span><br><span class="line">SQLAlchemy Core: Total time <span class="keyword">for</span> <span class="number">100000</span> records <span class="number">0.210998058319</span> secs</span><br><span class="line">sqlite3: Total time <span class="keyword">for</span> <span class="number">100000</span> records <span class="number">0.136252880096</span> sec</span><br></pre></td></tr></table></figure><p>注意：</p><p>这里只有第一、二种方式可以拿到插入记录的id，其它都不能直接拿到，需要自己再查询一次。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="SQLAlchemy" scheme="http://yoursite.com/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy 几种查询方式总结</title>
    <link href="http://yoursite.com/2018/01/26/SQLAlchemy%20%E5%87%A0%E7%A7%8D%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/01/26/SQLAlchemy 几种查询方式总结/</id>
    <published>2018-01-25T16:00:00.000Z</published>
    <updated>2018-12-17T06:37:20.770Z</updated>
    
    <content type="html"><![CDATA[<p>几种常见sqlalchemy查询：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单查询</span></span><br><span class="line">    print(session.query(User).all())</span><br><span class="line">    print(session.query(User.name, User.fullname).all())</span><br><span class="line">    print(session.query(User, User.name).all())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#带条件查询</span></span><br><span class="line">    print(session.query(User).filter_by(name=<span class="string">'user1'</span>).all())</span><br><span class="line">    print(session.query(User).filter(User.name == <span class="string">"user"</span>).all())</span><br><span class="line">    print(session.query(User).filter(User.name.like(<span class="string">"user%"</span>)).all())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#多条件查询</span></span><br><span class="line">    print(session.query(User).filter(and_(User.name.like(<span class="string">"user%"</span>), User.fullname.like(<span class="string">"first%"</span>))).all())</span><br><span class="line">    print(session.query(User).filter(or_(User.name.like(<span class="string">"user%"</span>), User.password != <span class="keyword">None</span>)).all())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#sql过滤</span></span><br><span class="line">    print(session.query(User).filter(<span class="string">"id&gt;:id"</span>).params(id=<span class="number">1</span>).all())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#关联查询 </span></span><br><span class="line">    print(session.query(User, Address).filter(User.id == Address.user_id).all())</span><br><span class="line">    print(session.query(User).join(User.addresses).all())</span><br><span class="line">    print(session.query(User).outerjoin(User.addresses).all())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#聚合查询</span></span><br><span class="line">    print(session.query(User.name, func.count(<span class="string">'*'</span>).label(<span class="string">"user_count"</span>)).group_by(User.name).all())</span><br><span class="line">    print(session.query(User.name, func.sum(User.id).label(<span class="string">"user_id_sum"</span>)).group_by(User.name).all())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#子查询</span></span><br><span class="line">    stmt = session.query(Address.user_id, func.count(<span class="string">'*'</span>).label(<span class="string">"address_count"</span>)).group_by(Address.user_id).subquery()</span><br><span class="line">    print(session.query(User, stmt.c.address_count).outerjoin((stmt, User.id == stmt.c.user_id)).order_by(User.id).all())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#exists</span></span><br><span class="line">    print(session.query(User).filter(exists().where(Address.user_id == User.id)))</span><br><span class="line">    print(session.query(User).filter(User.addresses.any()))</span><br></pre></td></tr></table></figure></p><p>限制返回字段查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"> </span><br><span class="line"><span class="comment"># count User records, without</span></span><br><span class="line"><span class="comment"># using a subquery.</span></span><br><span class="line">session.query(func.count(User.id))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># return count of user "id" grouped</span></span><br><span class="line"><span class="comment"># by "name"</span></span><br><span class="line">session.query(func.count(User.id)).\</span><br><span class="line">        group_by(User.name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> distinct</span><br><span class="line"> </span><br><span class="line"><span class="comment"># count distinct "name" values</span></span><br><span class="line">session.query(func.count(distinct(User.name)))</span><br></pre></td></tr></table></figure></p><p>记录总数查询：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"> </span><br><span class="line"><span class="comment"># count User records, without</span></span><br><span class="line"><span class="comment"># using a subquery.</span></span><br><span class="line">session.query(func.count(User.id))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># return count of user "id" grouped</span></span><br><span class="line"><span class="comment"># by "name"</span></span><br><span class="line">session.query(func.count(User.id)).\</span><br><span class="line">        group_by(User.name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> distinct</span><br><span class="line"> </span><br><span class="line"><span class="comment"># count distinct "name" values</span></span><br><span class="line">session.query(func.count(distinct(User.name)))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;几种常见sqlalchemy查询：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="SQLAlchemy" scheme="http://yoursite.com/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/03/python%203%E7%A7%8D%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/01/03/python 3种 多线程方法/</id>
    <published>2018-01-02T16:00:00.000Z</published>
    <updated>2018-12-17T06:37:02.957Z</updated>
    
    <content type="html"><![CDATA[<p>第一种 threading.Thread<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"> </span><br><span class="line">course_url = <span class="string">'xxxxxxxxxxx'</span></span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'&lt;a href="(/zuofa/\d+?)" title="(.*?)" class="shipu"&gt;'</span>)</span><br><span class="line"> </span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36'</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建线程类，继承Thread类</span></span><br><span class="line"><span class="comment"># class MyThread(threading.Thread):</span></span><br><span class="line"><span class="comment">#     def __init__(self, func, args):</span></span><br><span class="line"><span class="comment">#         super(MyThread, self).__init__()</span></span><br><span class="line"><span class="comment">#         self.func = func</span></span><br><span class="line"><span class="comment">#         self.args = args</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def run(self):</span></span><br><span class="line"><span class="comment">#         self.func(*self.args)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extra_links</span><span class="params">(q, f)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用于多线程采集</span></span><br><span class="line"><span class="string">    :param q: url 队列</span></span><br><span class="line"><span class="string">    :param f: 写入的目标文件</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = q.get()</span><br><span class="line">            r = requests.get(url, headers=headers)</span><br><span class="line">            <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">                soup = BeautifulSoup(r.text, <span class="string">'lxml'</span>)</span><br><span class="line">                course_list = soup.find(class_=<span class="string">'main-left'</span>)</span><br><span class="line">                links = course_list.find_all(class_=<span class="string">'item-tt-link'</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> links:</span><br><span class="line">                    href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">                    f.write(<span class="string">'http:&#123;&#125; ----&gt;&#123;&#125;\n'</span>.format(href, i.attrs[<span class="string">'title'</span>]))</span><br><span class="line">            q.task_done()</span><br><span class="line">        <span class="keyword">except</span> queue.Empty:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'course_link.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        q = queue.Queue()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">            q.put(<span class="string">'&#123;&#125;?page=&#123;&#125;'</span>.format(course_url, i))</span><br><span class="line">        threads = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            t = threading.Thread(target=extra_links, args=(q, f))</span><br><span class="line">            threads.append(t)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">            i.start()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">            i.join()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = time.clock()</span><br><span class="line">    main()</span><br><span class="line">    print(<span class="string">'运行时间: %.2f'</span> % (time.clock() - s))</span><br></pre></td></tr></table></figure></p><p>第二种  concurrent.futures import ThreadPoolExecutor<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"> </span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">course_url = [<span class="string">'xxxxxxxxxxx?page=&#123;&#125;'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>)]</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'&lt;a href="(/zuofa/\d+?)" title="(.*?)" class="shipu"&gt;'</span>)</span><br><span class="line"> </span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36'</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extra_links</span><span class="params">(url)</span>:</span></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">'lxml'</span>)</span><br><span class="line">        course_list = soup.find(class_=<span class="string">'main-left'</span>)</span><br><span class="line">        links = course_list.find_all(class_=<span class="string">'item-tt-link'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> links:</span><br><span class="line">            href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">            f.write(<span class="string">'http:&#123;&#125; ----&gt;&#123;&#125;\n'</span>.format(href, i.attrs[<span class="string">'title'</span>]))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = time.clock()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'course_link.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">20</span>) <span class="keyword">as</span> executor:</span><br><span class="line">            executor.map(extra_links, course_url)</span><br><span class="line">    print(<span class="string">'运行用时: %.2f 秒'</span> % (time.clock() - s))</span><br></pre></td></tr></table></figure></p><p>第三种  from multiprocessing.dummy import Pool as ThreadPool<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"> </span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">course_url = [<span class="string">'xxxxxxxxxxxx?page=&#123;&#125;'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>)]</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'&lt;a href="(/zuofa/\d+?)" title="(.*?)" class="shipu"&gt;'</span>)</span><br><span class="line"> </span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36'</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extra_links</span><span class="params">(url)</span>:</span></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">'lxml'</span>)</span><br><span class="line">        course_list = soup.find(class_=<span class="string">'main-left'</span>)</span><br><span class="line">        links = course_list.find_all(class_=<span class="string">'item-tt-link'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> links:</span><br><span class="line">            href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">            f.write(<span class="string">'http:&#123;&#125; ----&gt;&#123;&#125;\n'</span>.format(href, i.attrs[<span class="string">'title'</span>]))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = time.clock()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'course_link.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pool = ThreadPool(<span class="number">20</span>)</span><br><span class="line">        pool.map(extra_links, course_url)</span><br><span class="line">        pool.close()</span><br><span class="line">        pool.join()</span><br><span class="line">    print(<span class="string">'运行用时: %.2f 秒'</span> % (time.clock() - s))</span><br></pre></td></tr></table></figure></p><p>速度可自行测试  后两种相对简单</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一种 threading.Thread&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Geopandas 安装 (python中的地理空间数据)</title>
    <link href="http://yoursite.com/2017/12/22/Geopandas%20%E5%AE%89%E8%A3%85%20(python%E4%B8%AD%E7%9A%84%E5%9C%B0%E7%90%86%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE)/"/>
    <id>http://yoursite.com/2017/12/22/Geopandas 安装 (python中的地理空间数据)/</id>
    <published>2017-12-21T16:00:00.000Z</published>
    <updated>2018-12-17T06:36:27.690Z</updated>
    
    <content type="html"><![CDATA[<p>Geopandas 依赖库<br>从  <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs</a> 下载 Fiona , GDAl , pyproj , Shapely<br>其他包可以通过 pip install geopandas 安装</p><table><thead><tr><th>包</th><th>版本</th><th style="text-align:right">版本</th></tr></thead><tbody><tr><td>Fiona</td><td>1.7.6</td><td style="text-align:right">1.7.6</td></tr><tr><td>GDAL</td><td>2.1.3</td><td style="text-align:right">2.1.3</td></tr><tr><td>Shapely</td><td>1.5.17</td><td style="text-align:right">1.5.17</td></tr><tr><td>appdirs</td><td>1.4.3</td><td style="text-align:right">1.4.3</td></tr><tr><td>better-exceptions</td><td>0.1.7</td><td style="text-align:right">0.1.7</td></tr><tr><td>click</td><td>6.7</td><td style="text-align:right">6.7</td></tr><tr><td>click-plugins</td><td>1.0.3</td><td style="text-align:right">1.0.3</td></tr><tr><td>cligj</td><td>0.4.0</td><td style="text-align:right">0.4.0</td></tr><tr><td>colorama</td><td>0.3.9</td><td style="text-align:right">0.3.9</td></tr><tr><td>cycler</td><td>0.10.0</td><td style="text-align:right">0.10.0</td></tr><tr><td>descartes</td><td>1.1.0</td><td style="text-align:right">1.1.0</td></tr><tr><td>geopandas</td><td>0.2.1</td><td style="text-align:right">0.2.1</td></tr><tr><td>matplotlib</td><td>2.0.1</td><td style="text-align:right">2.0.1</td></tr><tr><td>munch</td><td>2.1.1</td><td style="text-align:right">2.1.1</td></tr><tr><td>numpy</td><td>1.12.1</td><td style="text-align:right">1.11.2</td></tr><tr><td>packaging</td><td>16.8</td><td style="text-align:right">16.8</td></tr><tr><td>pandas</td><td>0.19.2</td><td style="text-align:right">0.19.2</td></tr><tr><td>pip</td><td>9.0.1</td><td style="text-align:right">9.0.1</td></tr><tr><td>pyparsing</td><td>2.2.0</td><td style="text-align:right">2.2.0</td></tr><tr><td>pyproj</td><td>1.9.5.1</td><td style="text-align:right">1.9.5.1</td></tr><tr><td>python-dateutil</td><td>2.6.0</td><td style="text-align:right">2.6.0</td></tr><tr><td>pytz</td><td>2017.2</td><td style="text-align:right">2016.10</td></tr><tr><td>setuptools</td><td>35.0.2</td><td style="text-align:right">35.0.2</td></tr><tr><td>six</td><td>1.10.0</td><td style="text-align:right">1.10.0</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Geopandas 依赖库&lt;br&gt;从  &lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.lfd.uci.edu/~gohlke/pyt
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="SQLAlchemy" scheme="http://yoursite.com/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>python os.system os.popen 模块 调用命令行</title>
    <link href="http://yoursite.com/2017/12/22/python%20os.system%20os.popen%20%E6%A8%A1%E5%9D%97%20%E8%B0%83%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://yoursite.com/2017/12/22/python os.system os.popen 模块 调用命令行/</id>
    <published>2017-12-21T16:00:00.000Z</published>
    <updated>2018-12-17T06:36:57.648Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import os </span><br><span class="line">from pprint import pprint  </span><br><span class="line"># 只能执行 不能获取返回信息</span><br><span class="line">os.system(&apos;dir&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 可以获取命令行返回信息 </span><br><span class="line">tmp = os.popen(&apos;dir &apos;).readlines()    </span><br><span class="line">pprint(tmp)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python查看是32位还是64位版本</title>
    <link href="http://yoursite.com/2017/12/22/python%E6%9F%A5%E7%9C%8B%E6%98%AF32%E4%BD%8D%E8%BF%98%E6%98%AF64%E4%BD%8D%E7%89%88%E6%9C%AC/"/>
    <id>http://yoursite.com/2017/12/22/python查看是32位还是64位版本/</id>
    <published>2017-12-21T16:00:00.000Z</published>
    <updated>2018-12-17T06:36:49.348Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>platform.architecture()</span><br><span class="line"></span><br><span class="line">(<span class="string">'64bit'</span>, <span class="string">'ELF'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>styleSheet样式无效</title>
    <link href="http://yoursite.com/2017/12/16/styleSheet%E6%A0%B7%E5%BC%8F%E6%97%A0%E6%95%88/"/>
    <id>http://yoursite.com/2017/12/16/styleSheet样式无效/</id>
    <published>2017-12-15T16:00:00.000Z</published>
    <updated>2018-12-17T06:39:18.872Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSubWidget-设置的窗体样式是无效的，"><a href="#CSubWidget-设置的窗体样式是无效的，" class="headerlink" title="CSubWidget 设置的窗体样式是无效的，"></a>CSubWidget 设置的窗体样式是无效的，</h3><p>查看文档会发现</p><blockquote><p>QWidget<br>Supports only the background, background-clip and background-origin properties.<br>If you subclass from QWidget, you need to provide a paintEvent for your custom QWidget as below:<br>void CustomWidget::paintEvent(QPaintEvent *)<br>{<br>    QStyleOption opt;<br>    opt.init(this);<br>    QPainter p(this);<br>    style()-&gt;drawPrimitive(QStyle::PE_Widget, &amp;opt, &amp;p, this);<br>}<br>The above code is a no-operation if there is no stylesheet set.<br>Warning: Make sure you define the Q_OBJECT macro for your custom widget.</p></blockquote><h3 id="为CSubWidget-加上paintEvent就可以解决"><a href="#为CSubWidget-加上paintEvent就可以解决" class="headerlink" title="为CSubWidget 加上paintEvent就可以解决"></a>为CSubWidget 加上paintEvent就可以解决</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CSubWidget-设置的窗体样式是无效的，&quot;&gt;&lt;a href=&quot;#CSubWidget-设置的窗体样式是无效的，&quot; class=&quot;headerlink&quot; title=&quot;CSubWidget 设置的窗体样式是无效的，&quot;&gt;&lt;/a&gt;CSubWidget 设置的窗体样
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>QT控件及示例</title>
    <link href="http://yoursite.com/2017/12/07/QT%E6%8E%A7%E4%BB%B6%E5%8F%8A%E7%A4%BA%E4%BE%8B/"/>
    <id>http://yoursite.com/2017/12/07/QT控件及示例/</id>
    <published>2017-12-06T16:00:00.000Z</published>
    <updated>2018-12-17T06:38:49.246Z</updated>
    
    <content type="html"><![CDATA[<p>QT控件及示例<br>QT属性控件项目<br><a href="https://github.com/lexxmark/QtnProperty" target="_blank" rel="noopener">https://github.com/lexxmark/QtnProperty</a></p><p>比特币交易软件<br><a href="https://github.com/JulyIGHOR/QtBitcoinTrader" target="_blank" rel="noopener">https://github.com/JulyIGHOR/QtBitcoinTrader</a></p><p>导航控件<br><a href="http://qt-apps.org/content/show.php/NavBar?content=162885" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/NavBar?content=162885</a></p><p>虚拟键盘<br><a href="http://qt-apps.org/content/show.php/VirtualKeyboard?content=107388" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/VirtualKeyboard?content=107388</a></p><p>扩展控件<br><a href="http://qt-apps.org/content/show.php/ExpanderWidget?content=163843" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/ExpanderWidget?content=163843</a></p><p>导航条(类似tab)<br><a href="http://qt-apps.org/content/show.php/DMSNavigation?content=163730" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/DMSNavigation?content=163730</a></p><p>类似Xp左侧的扩展组工具<br><a href="http://qt-apps.org/content/show.php/iisTaskPanel?content=79286" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/iisTaskPanel?content=79286</a></p><p>仪表控件<br><a href="http://qt-apps.org/content/show.php/AnalogWidgets?content=87780" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/AnalogWidgets?content=87780</a></p><p>遮罩控件<br><a href="http://qt-apps.org/content/show.php/QLightBoxWidget?content=162277" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QLightBoxWidget?content=162277</a></p><p>又一个简单的属性控件<br><a href="http://qt-apps.org/content/show.php/Simple+Object+Inspector?content=162244" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/Simple+Object+Inspector?content=162244</a></p><p>按钮样式设计器<br><a href="http://qt-apps.org/content/show.php/Button+Styler?content=162217" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/Button+Styler?content=162217</a></p><p>密集网格控件<br><a href="http://qt-apps.org/content/show.php/GridView?content=158138" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/GridView?content=158138</a></p><p>全屏适配器<br><a href="http://qt-apps.org/content/show.php/QFullScreenAdapter?content=153900" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QFullScreenAdapter?content=153900</a></p><p>多选下拉列表<br><a href="http://qt-apps.org/content/show.php/QMultiComboBox?content=149416" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QMultiComboBox?content=149416</a></p><p>数字键盘<br><a href="http://qt-apps.org/content/show.php/NUMPAD?content=155032" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/NUMPAD?content=155032</a></p><p>table表头控件<br><a href="http://qt-apps.org/content/show.php/QSpreadsheetHeaderView?content=154405" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QSpreadsheetHeaderView?content=154405</a></p><p>指令应答控件(类似控制台)<br><a href="http://qt-apps.org/content/show.php/ReplWidget?content=152031" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/ReplWidget?content=152031</a></p><p>十六进制控件未下载成功<br><a href="http://qt-apps.org/content/show.php/QHexEdit?content=133189" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QHexEdit?content=133189</a><br><a href="https://code.google.com/p/qhexedit2/source/checkout" target="_blank" rel="noopener">https://code.google.com/p/qhexedit2/source/checkout</a></p><p>侧边控件(类安卓)<br><a href="http://qt-apps.org/content/show.php/Sidebar+?content=147860" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/Sidebar+?content=147860</a></p><p>多表头控件<br><a href="http://qt-apps.org/content/show.php/HierarchicalHeaderView?content=103154" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/HierarchicalHeaderView?content=103154</a></p><p>仪表控件<br><a href="http://qt-apps.org/content/show.php/QNeedleIndicator?content=118474" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QNeedleIndicator?content=118474</a></p><p>有很多控件的集合<br><a href="http://qt-apps.org/content/show.php/wwWidgets?content=126142" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/wwWidgets?content=126142</a></p><p>图标动态变大小的工具条cool<br><a href="http://qt-apps.org/content/show.php/QIrDock?content=115318" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QIrDock?content=115318</a></p><p>属性控件<br><a href="http://qt-apps.org/content/show.php/yape+%28Yet+another+property+editor%29?content=100064" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/yape+%28Yet+another+property+editor%29?content=100064</a></p><p>很牛的Grid，带树，带分隔<br><a href="http://qt-apps.org/content/show.php/QExtendedWidgets?content=103163" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QExtendedWidgets?content=103163</a></p><p>像wpf的照片墙(无法下载)<br><a href="http://qt-apps.org/content/show.php/THCoverFlow?content=102200" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/THCoverFlow?content=102200</a></p><p>液晶板控件(较粗)<br><a href="http://qt-apps.org/content/show.php/QLedMatrix?content=101193" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QLedMatrix?content=101193</a></p><p>属性控件<br><a href="http://qt-apps.org/content/show.php/Value+Browser?content=50717" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/Value+Browser?content=50717</a></p><p>数据列表控件（可打印）<br><a href="http://qt-apps.org/content/show.php/Thetyss+Data+Browser?content=76696" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/Thetyss+Data+Browser?content=76696</a></p><p>MacNavBar<br><a href="http://qt-apps.org/content/show.php/QfMacNavBar?content=78749" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QfMacNavBar?content=78749</a></p><p>倒影控件<br><a href="http://qt-apps.org/content/show.php/QReflex?content=75962" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QReflex?content=75962</a></p><p>音量控件<br><a href="http://qt-apps.org/content/show.php/QVUMeter?content=75678" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QVUMeter?content=75678</a></p><p>照片墙控件像wpf<br><a href="http://qt-apps.org/content/show.php/PictureFlow?content=75348" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/PictureFlow?content=75348</a></p><p>液晶板控件(细)<br><a href="http://qt-apps.org/content/show.php/QSlide?content=75303" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/QSlide?content=75303</a></p><p>下拉按钮<br><a href="http://qt-apps.org/content/show.php/EnumComboBox?content=166012" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/EnumComboBox?content=166012</a></p><p>加速器(悬浮按钮)<br><a href="http://qt-apps.org/content/show.php/modern+computer+flatboat?content=156221" target="_blank" rel="noopener">http://qt-apps.org/content/show.php/modern+computer+flatboat?content=156221</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;QT控件及示例&lt;br&gt;QT属性控件项目&lt;br&gt;&lt;a href=&quot;https://github.com/lexxmark/QtnProperty&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/lexxmark/QtnPr
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>QTableWidget与QTableView的区别</title>
    <link href="http://yoursite.com/2017/12/01/QTableWidget%E4%B8%8EQTableView%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/12/01/QTableWidget与QTableView的区别/</id>
    <published>2017-11-30T16:00:00.000Z</published>
    <updated>2018-12-17T06:38:42.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QTableWidget与QTableView的区别"><a href="#QTableWidget与QTableView的区别" class="headerlink" title="QTableWidget与QTableView的区别"></a>QTableWidget与QTableView的区别</h1><p>QTableWidget继承自QTableView。QSqlTableModel能与QTableView绑定，但不能于QTableWidget绑定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">QSqlTableModel *model = <span class="keyword">new</span> QSqlTableModel;  </span><br><span class="line">model-&gt;setTable(<span class="string">"employee"</span>);  </span><br><span class="line">model-&gt;setEditStrategy(QSqlTableModel::OnManualSubmit);  </span><br><span class="line">model-&gt;select();  </span><br><span class="line">model-&gt;removeColumn(<span class="number">0</span>); <span class="comment">// don't show the ID  </span></span><br><span class="line">model-&gt;setHeaderData(<span class="number">0</span>, Qt::Horizontal, tr(<span class="string">"Name"</span>));  </span><br><span class="line">model-&gt;setHeaderData(<span class="number">1</span>, Qt::Horizontal, tr(<span class="string">"Salary"</span>));  </span><br><span class="line">   </span><br><span class="line">QTableView *view = <span class="keyword">new</span> QTableView;  </span><br><span class="line">view-&gt;setModel(model);  </span><br><span class="line">view-&gt;show();</span><br></pre></td></tr></table></figure><p>QTableWidget是QT程序中常用的显示数据表格的空间，很类似于VC、C#中的DataGrid。说到QTableWidget，就必须讲一下它跟QTabelView的区别了。</p><p>​ QTableWidget是QTableView的子类，主要的区别是QTableView可以使用自定义的数据模型来显示内容(也就是先要通过setModel来绑定数据源)，而QTableWidget则只能使用标准的数据模型，并且其单元格数据是QTableWidgetItem的对象来实现的(也就是不需要数据源，将逐个单元格内的信息填好即可)。这主要体现在QTableView类中有setModel成员函数，而到了QTableWidget类中，该成员函数变成了私有。使用QTableWidget就离不开QTableWidgetItem。QTableWidgetItem用来表示表格中的一个单元格，正个表格都需要用逐个单元格构建起来。</p><p>​ 具体区别表格<br>| 区别点 | QTableView | QTableWidget |<br>| — | — | — |<br>| 继承关系 |  | QTableWidget继承自QTableView |<br>| 使用数据模型setModel | 可以使用setModel设置数据模型 | setModel是私有函数，不难使用该函数设置数据模型 |<br>| 显示复选框setCheckState | 没有函数实现复选框 | QTableWidgetItem类中的setCheckState(Qt::Checked);可以设置复选框 |<br>| 与QSqlTableModel绑定 | QTableView能与QSqlTableModel绑定 | QtableWidget不能与QSqlTableModel绑定 |</p><p>View与Model绑定注意事项</p><p>但视图与模型绑定时，模型必须使用new来创建。否则视图不能随着模型的改变而改变。</p><p>Eorror错误的写法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QStandardItemModel <span class="title">model</span><span class="params">(<span class="number">4</span>,<span class="number">2</span>)</span></span>;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">model.setHeaderData(<span class="number">0</span>, Qt::Horizontal, tr(<span class="string">"Label"</span>));  </span><br><span class="line">model.setHeaderData(<span class="number">1</span>, Qt::Horizontal, tr(<span class="string">"Quantity"</span>));  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">ui.tableView-&gt;setModel(&amp;model);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; <span class="number">4</span>; ++row) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> column = <span class="number">0</span>; column &lt; <span class="number">2</span>; ++column) &#123;  </span><br><span class="line">        QModelIndex index = model.index(row, column, QModelIndex());  </span><br><span class="line">        model.setData(index, QVariant((row+<span class="number">1</span>) * (column+<span class="number">1</span>)));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Right 正确的写法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">QStandardItemModel *model;  </span><br><span class="line">  </span><br><span class="line">model = <span class="keyword">new</span> QStandardItemModel(<span class="number">4</span>,<span class="number">2</span>);  </span><br><span class="line">ui.tableView-&gt;setModel(model);  </span><br><span class="line">  </span><br><span class="line">model-&gt;setHeaderData(<span class="number">0</span>, Qt::Horizontal, tr(<span class="string">"Label"</span>));  </span><br><span class="line">model-&gt;setHeaderData(<span class="number">1</span>, Qt::Horizontal, tr(<span class="string">"Quantity"</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; <span class="number">4</span>; ++row) &#123;  </span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> column = <span class="number">0</span>; column &lt; <span class="number">2</span>; ++column) &#123;  </span><br><span class="line">         QModelIndex index = model-&gt;index(row, column, QModelIndex());  </span><br><span class="line">         model-&gt;setData(index, QVariant((row+<span class="number">1</span>) * (column+<span class="number">1</span>)));  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;QTableWidget与QTableView的区别&quot;&gt;&lt;a href=&quot;#QTableWidget与QTableView的区别&quot; class=&quot;headerlink&quot; title=&quot;QTableWidget与QTableView的区别&quot;&gt;&lt;/a&gt;QTableWi
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>QMediaPlayer多媒体类</title>
    <link href="http://yoursite.com/2017/11/20/QMediaPlayer%E5%A4%9A%E5%AA%92%E4%BD%93%E7%B1%BB/"/>
    <id>http://yoursite.com/2017/11/20/QMediaPlayer多媒体类/</id>
    <published>2017-11-19T16:00:00.000Z</published>
    <updated>2018-12-17T06:38:35.974Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-多媒体播放"><a href="#1-多媒体播放" class="headerlink" title="1.多媒体播放"></a>1.多媒体播放</h4><p>QMediaPlayer类是QT自带的多媒体类。 实现简单的音视频播放是很简单的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QMediaPlayer qtaudioPlayer;</span><br><span class="line">​</span><br><span class="line">qtaudioPlayer-&gt;setMedia(QUrl::fromLocalFile(filePath));</span><br><span class="line">​</span><br><span class="line">qtaudioPlayer-&gt;play();</span><br></pre></td></tr></table></figure></p><p>这里的filePath如果是音频路径，就直接播放音频， 如果是视频路径就直接播放视频。</p><p>如果是服务上的音视频路径的话， 需要在前面加上一个http://头， 当然如果返回就自带http://头就不用加。</p><p>如：服务器返回一个<a href="http://www.test.com/test.wav" target="_blank" rel="noopener">www.test.com/test.wav</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filePath = QLatin1String(http://www.test.com/test.wav);</span><br><span class="line">​</span><br><span class="line">qtaudioPlayer-&gt;setMedia(QUrl::fromLocalFile(filePath));</span><br></pre></td></tr></table></figure></p><p>这样就可以直接播放网络上的音视频文件了。</p><h4 id="2-多媒体控制"><a href="#2-多媒体控制" class="headerlink" title="2.多媒体控制"></a>2.多媒体控制</h4><p>当然简单的音视频播放是很容易，在实际的播放器制作过程中，需要控制播放过程中的很多操作，QMediaPlayer 提供了很多信号，来让用户处理。</p><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mediaStatusChanged(QMediaPlayer::MediaStatus)</span><br></pre></td></tr></table></figure></p><p>这个是音视频状态改变的信号， 如：暂停， 停止， 播放，它都能直接监控<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">durationChanged(qint64)</span><br></pre></td></tr></table></figure></p><p>这个是播放文件数据总大小的信号， 它可以获得文件时间长度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">positionChanged(qint64)</span><br></pre></td></tr></table></figure></p><p>这个是播放到什么位置的信号， 参数是以毫秒来计算的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumeChanged(int)</span><br></pre></td></tr></table></figure></p><p>这个是声音调节的信号，监控当前声音的大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutedChanged(bool)</span><br></pre></td></tr></table></figure></p><p>这个是是否为静音的信号。</p><p>==音视频播放的过程中， 位置和总大小都是用毫秒表示的，可以进行单位换算==。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-多媒体播放&quot;&gt;&lt;a href=&quot;#1-多媒体播放&quot; class=&quot;headerlink&quot; title=&quot;1.多媒体播放&quot;&gt;&lt;/a&gt;1.多媒体播放&lt;/h4&gt;&lt;p&gt;QMediaPlayer类是QT自带的多媒体类。 实现简单的音视频播放是很简单的。&lt;br&gt;&lt;figu
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>QLineEdit的setInputMask和正则表达式冲突</title>
    <link href="http://yoursite.com/2017/11/16/QLineEdit%E7%9A%84setInputMask%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%86%B2%E7%AA%81/"/>
    <id>http://yoursite.com/2017/11/16/QLineEdit的setInputMask和正则表达式冲突/</id>
    <published>2017-11-15T16:00:00.000Z</published>
    <updated>2018-12-17T06:38:27.861Z</updated>
    
    <content type="html"><![CDATA[<h4 id="疑问："><a href="#疑问：" class="headerlink" title="疑问："></a>疑问：</h4><p>我想做个IP控件，看到很多个，感觉都不是很理想。就想用下面的形式来做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QRegExp regExp(&quot;^(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])...$&quot;);   </span><br><span class="line">​</span><br><span class="line">ipEdit-&gt;setValidator(new QRegExpValidator(regExp, this));</span><br><span class="line">​</span><br><span class="line">ipEdit-&gt;setInputMask(&quot;000.000.000.000&quot;);</span><br></pre></td></tr></table></figure></p><p>可是这样发现，当设置setInputMask后，前面的正则表达式就不起作用了，请问下这个是怎样回事，是不是setInputMask本身就是一个正则表达式，这样就把之前的给覆盖了.</p><h4 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ipEdit-&gt;setInputMask(&quot;000.000.000.000&quot;);</span><br><span class="line">​</span><br><span class="line">改成 ipEdit-&gt;setInputMask(&quot;000.000.000.000;0&quot;);</span><br></pre></td></tr></table></figure><p>就会同时生效 “;0”表示删除时默认填充为0 不想填充为0 可改为“; ”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;疑问：&quot;&gt;&lt;a href=&quot;#疑问：&quot; class=&quot;headerlink&quot; title=&quot;疑问：&quot;&gt;&lt;/a&gt;疑问：&lt;/h4&gt;&lt;p&gt;我想做个IP控件，看到很多个，感觉都不是很理想。就想用下面的形式来做：&lt;br&gt;&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>IP地址的正则表达式写法</title>
    <link href="http://yoursite.com/2017/11/15/IP%E5%9C%B0%E5%9D%80%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%86%99%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/15/IP地址的正则表达式写法/</id>
    <published>2017-11-14T16:00:00.000Z</published>
    <updated>2018-12-17T06:38:10.472Z</updated>
    
    <content type="html"><![CDATA[<p>这里所描述的的是IPv4的地址格式，总长度 32位=4段*8位，每段之间用.分割， 每段都是0-255之间的十进制数值。</p><p>将0-255用正则表达式表示，可以分成一下几块来分别考虑：</p><table><thead><tr><th>取值区间</th><th>特点</th><th>正则写法</th><th>可合并的写法</th><th>可合并的写法</th><th>可合并的写法</th></tr></thead><tbody><tr><td>0-9</td><td>一位数，只有个位，取值是0~9</td><td>\d</td><td>[1-9]?\d</td><td>(1\d{2})</td><td>([1-9]?\d)</td><td>(25[0-5]</td><td>2[0-4]\d</td><td>((1\d{2})</td><td>([1-9]?\d))</td></tr><tr><td>10-99</td><td>两位数，十位取值1-9，个位取值是0~9</td><td>[1-9]\d</td><td></td><td></td><td></td></tr><tr><td>100-199</td><td>三位数，最高位取值为1，十位取值0-9，个位取值0-9</td><td>1\d{2}</td><td>-</td><td></td><td></td></tr><tr><td>200-249</td><td>三位数，最高位取值为2，十位取值0-4，个位取值0-9</td><td>2[0-4]\d</td><td>-</td><td>-</td><td></td></tr><tr><td>250-255</td><td>三位数，最高位取值为2，十位取值5，个位取值0-5</td><td>25[0-5]</td><td>-</td><td>-</td></tr></tbody></table><p>IP地址格式可表示为：XXX.XXX.XXX.XXX，XXX取值范围是0-255，前三段加一个.重复了三次，在与最后一段合并及组成IP地址的完整格式。</p><p>所以IP地址的正则表示法如下：<br><code>((25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d)))\.){3}(25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d)))</code></p><p>Qt中的正则表达式与C++中的有点区别：”\d”表示”\d”（<code>双斜杠表示单斜杠</code>）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里所描述的的是IPv4的地址格式，总长度 32位=4段*8位，每段之间用.分割， 每段都是0-255之间的十进制数值。&lt;/p&gt;
&lt;p&gt;将0-255用正则表达式表示，可以分成一下几块来分别考虑：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;取值区间&lt;/th&gt;

      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从同步的原理</title>
    <link href="http://yoursite.com/2017/11/15/MySQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2017/11/15/MySQL主从同步的原理/</id>
    <published>2017-11-14T16:00:00.000Z</published>
    <updated>2018-12-17T06:36:30.676Z</updated>
    
    <content type="html"><![CDATA[<p>主从同步的原理：<br>1、主库上面有一个IO线程，从库上有一个IO线程和一个SQL线程，从库中的IO线程负责从主库读取binlog，并写入从库的中继日志；SQL线程负责读取并执行中继日志中的binlog，转换sql语句后应用数据库汇总<br>2、通信是：</p><ul><li>从库的IO线程给主库发送同步请求，请求中包含用户名密码和binlog的文件名，pos点</li><li>主库验证成功后，发送从库需要的binlog日志文件，和binlog文件中pos点</li><li>从库的IO线程接收后，把binlog文件转存到中继日志的relay-log文件，并把binlog文件名和pos点记录到master.info文件中，方便下次通信使用</li><li>从库的SQl线程监测出relay-log文件后，把relay-log文件转换为binlog文件在本地执行，并把relay-log文件名和pos点记录到relay-log.info文件中</li><li>从库再次发送下一轮的请求~~~</li></ul><p>如果slave后面还挂有从库则也要开启binlog，并添加一个参数log-slave-updates</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主从同步的原理：&lt;br&gt;1、主库上面有一个IO线程，从库上有一个IO线程和一个SQL线程，从库中的IO线程负责从主库读取binlog，并写入从库的中继日志；SQL线程负责读取并执行中继日志中的binlog，转换sql语句后应用数据库汇总&lt;br&gt;2、通信是：&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
</feed>
